<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[B-Spoked]]></title>
  <link href="http://b-spoked.com/atom.xml" rel="self"/>
  <link href="http://b-spoked.com/"/>
  <updated>2012-12-26T13:42:04+13:00</updated>
  <id>http://b-spoked.com/</id>
  <author>
    <name><![CDATA[B-Spoked]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Singlepage WebApps - my stack]]></title>
    <link href="http://b-spoked.com/blog/2012/11/27/singlepage-webapps-my-stack/"/>
    <updated>2012-11-27T21:40:00+13:00</updated>
    <id>http://b-spoked.com/blog/2012/11/27/singlepage-webapps-my-stack</id>
    <content type="html"><![CDATA[<p class="lead">Here are the technologies I currently use when building Webb Apps. My general philosophy is to keep things as simple as possible and aim for bang for buck.</p>


<p>Some of these were off my list when starting but as apps progressed I introduced them cut down on the amount of code I was having to roll myself.</p>


<ul>
<li><a href="http://backbonejs.org/">Backbonejs</a> The glue that helps hold my apps togther. To be honest it took a little while but now I am away and loving it.</li>
<li><a href="https://github.com/jeromegn/Backbone.localStorage">Backbone Local Storage</a>. Used when I just want offline storage taking advantage of moderen browsers to store data.</li>
<li><a href="https://github.com/Ask11/backbone.offline">Backbone Offline</a> When I want offline capability then I use this add-on. It takes care of syncing to the server when you are back online.</li>
<li><a href="http://jquery.com/">JQuery</a> Write Less Do More. A default standard really</li>
<li><a href="http://twitter.github.com/bootstrap/index.html">Twitter Bootstrap</a> Keeping layout and UI components consistent and simple.</li>
<li><a href="http://d3js.org/>d3.js</a>  Data-Driven Documents for visualizations - Awesome!!</li>
<li><a href="https://github.com/Luracast/Restler">Restler</a> A REST API written in PHP</li>
<li><a href="http://www.mysql.com/">MySql</a> The general default DB I am using at the moment</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbonejs - lessons learnt]]></title>
    <link href="http://b-spoked.com/blog/2012/11/27/backbonejs-lessons-learnt/"/>
    <updated>2012-11-27T21:39:00+13:00</updated>
    <id>http://b-spoked.com/blog/2012/11/27/backbonejs-lessons-learnt</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbonejs - handling relationships between models]]></title>
    <link href="http://b-spoked.com/blog/2012/11/27/backbonejs-handling-relationships-between-models/"/>
    <updated>2012-11-27T21:39:00+13:00</updated>
    <id>http://b-spoked.com/blog/2012/11/27/backbonejs-handling-relationships-between-models</id>
    <content type="html"><![CDATA[<p class="lead"></p>


<p><code>
var User = Backbone.Model.extend({</p>

<pre><code>    defaults: {
        id:'',
        name: '',
        email: '',
        thumbnail: '',
        newsletter:false,
        updated_at : '',
        todos: [],
        recommended: []
    },

    urlRoot: "/api/index.php/user.json",

    initialize: function() {

        var self = this;

        this.todos = new RelatedPlaceList(this.get('todos'));
        this.todos.url = function () {
            return self.urlRoot + '/todos/'+self.get('id');
        };

        this.recommended = new RelatedPlaceList(this.get('recommended'));
        this.recommended.url = function () {
            return self.urlRoot + '/recommended/'+self.get('id');
        };

    },
    saveRelatedModels : function(){

        var related_todos = this.todos.pluck('id');
        var related_recommended = this.recommended.pluck('id'); 
        this.save({id: this.id, todos: related_todos, recommended:related_recommended});
    }
});
</code></pre>

<p></code>
<code>
var Place = Backbone.Model.extend({</p>

<pre><code>    defaults: {
        id:0,
        updated_at : '',
        name: '',
        description: '',
        address: '',
        distance: 0,
        latitude: 0,
        longitude: 0,
        todousers: [],
        recommendedusers: [],
        canRemoveRecommended:false,
        canRemoveTodo:false
    },

    urlRoot: "/api/index.php/place.json",

    initialize: function() {

        var self = this;

        this.todousers = new RelatedUserList(this.get('todousers'));
        this.todousers.url = function () {
            return self.urlRoot + '/todousers/'+self.get('sid');
        };

        this.recommendedusers = new RelatedUserList(this.get('recommendedusers'));
        this.recommendedusers.url = function () {
            return self.urlRoot + '/recommendedusers/'+self.get('sid');
        };

    }

});
</code></pre>

<p></code></p>

<p><code>
var RelatedPlaceList =  Backbone.Collection.extend({</p>

<pre><code>model : Place,
search : function(letters) {
    if(letters == "")
        return this;

    var pattern = new RegExp(letters,"gi");
        return _(this.filter( function(data) {
            return pattern.test(data.get("name")) ||pattern.test(data.get("description"));
            }));
    }
</code></pre>

<p>});
</code></p>

<p><code></p>

<p>app.PlaceView = Backbone.View.extend({</p>

<pre><code>    //... is a list tag.
    tagName:  'div',

    className: 'span4 well well-small',

    // Cache the template function for a single item.
    template: _.template( $('#place-template').html() ),

    // The DOM events specific to an item.
    events: {
        'click .bookmark' : 'addBookmark',
        'click .recommend' : 'addRecommendation',
        'click .on-todo-list' : 'showUsersToDo',
        'click .recommend-by' : 'showUsersRecommend'
    },
    initialize: function() {
        this.model.on( 'change', this.render, this );
        this.model.todousers.on( 'reset', this.addUsersToDo, this );
        this.model.recommendedusers.on( 'reset', this.addUsersRecommend, this );
    },
    showUsersToDo : function() {
        this.model.todousers.fetch();
        var todoId = '#todo_' + this.model.get('id');
        $(todoId).slideToggle('slow');

    },
    showUsersRecommend : function() {
        this.model.recommendedusers.fetch();
        var recommendedId = '#recommended_' + this.model.get('id');
        $(recommendedId).slideToggle('slow');
    },

    addBookmark : function() {
        var userId = app.BrowsingUserSession.get('id');
        if(app.Users.get(userId)){
            app.Users.get(userId).todos.push(this.model);
            app.Users.get(userId).saveRelatedModels();
        }
    },
    addRecommendation : function() {

        var userId = app.BrowsingUserSession.get('id');
        if(app.Users.get(userId)){
            app.Users.get(userId).recommended.push(this.model);
            app.Users.get(userId).saveRelatedModels();
        }
    }
});
</code></pre>

<p></code></p>
]]></content>
  </entry>
  
</feed>
